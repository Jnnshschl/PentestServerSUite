import logging as logger
import mimetypes
import threading
from datetime import datetime
from pathlib import Path

import filetype
from colorama import Fore
from tornado.ioloop import IOLoop
from tornado.web import Application, RequestHandler

from pssutil.payloadmanager import PayloadManager


def build_filename(path: Path):
    if not isinstance(path, Path):
        path = Path(path)

    pre_num_path = f"{path.parent}/{path.stem}"
    post_num_path = f"{path.suffix}"

    i = 0

    while path.exists():
        i += 1
        path = Path(f"{pre_num_path}_{i}{post_num_path}")

    return path


class PssHttpServer(Application):
    def __init__(self, address: str, port: int, serve_folder: Path) -> None:
        Application.__init__(self, [(r".*", PssHttpHandler)])
        self.address = address
        self.port = port
        self.serve_folder = serve_folder

        self.tornado_thread = threading.Thread(target=self.http_run, args=[address, port], daemon=True)
        self.tornado_thread.start()

        logger.info(f"Started HTTP server on {Fore.LIGHTYELLOW_EX}{address}:{port}{Fore.RESET}")

    def http_run(self, address, port):
        ioloop = IOLoop()
        self.listen(port, address=address)
        ioloop.start()


class PssHttpHandler(RequestHandler):
    def get(self):
        pm = PayloadManager()

        try:
            p = pm.build_payload(self.request.uri, self.request.headers.get("User-Agent", None))
        except:
            p = None

        if p:
            self.set_status(200)
            self.finish(p)

        elif pm.cfg.serve_folder:
            filepath = self.request.uri

            if filepath.startswith("/"):
                filepath = filepath[1:]

            filepath = Path(pm.cfg.serve_folder, filepath)

            if filepath.exists() and filepath.is_file():
                self.set_status(200)

                try:
                    self.set_header("Content-Type", mimetypes.guess_type(filepath)[0])
                except:
                    self.set_header("Content-Type", "application/octet-stream")

                self.set_header("Content-Disposition", f"attachment; filename={filepath.name}")

                with open(filepath, "rb") as f:
                    self.write(f.read())

                self.finish()
            else:
                self.set_status(404)
                self.finish("404 File Not Found")
        else:
            self.set_status(404)
            self.finish("404 Not Found")

    def post(self):
        pm = PayloadManager()

        if pm.cfg.accept_uploads:
            upload_folder = Path(pm.cfg.uploads_folder)

            if not self.request.files:
                if "X-Filename" in self.request.headers:
                    filename = f'{Path(self.request.headers["X-Filename"]).name}'
                else:
                    filename = f'POST_{datetime.now().strftime("%d-%m-%Y_%H-%M-%S-%f")}.{filetype.guess(self.request.body).extension or "txt"}'

                filepath = build_filename(Path(upload_folder, filename))
                self.save_file(filepath, self.request.body)
            else:
                for file in self.request.files["file"]:
                    filepath = build_filename(Path(upload_folder, file["filename"].strip()))
                    self.save_file(filepath, file["body"])

        else:
            logger.info(f"File upload failed: {Fore.LIGHTRED_EX}uploads disabled{Fore.RESET}")

    def save_file(self, filepath: Path, data: bytes):
        if not filepath.exists():
            with open(filepath, "wb") as out_file:
                out_file.write(data)

            self.set_status(200)
            self.finish(f"OK: {filepath.name}\n")
            logger.info(f'File uploaded: "{Fore.LIGHTYELLOW_EX}{filepath.absolute()}{Fore.RESET}"')
        else:
            self.set_status(500)
            self.finish("Upload Failed, file already exists.\n")
            logger.info(f'File upload failed, already exists: "{Fore.LIGHTRED_EX}{filepath.absolute()}{Fore.RESET}"')
