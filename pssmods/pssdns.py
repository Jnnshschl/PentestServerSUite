import logging as logger
import threading

from colorama import Fore
from dnslib import QTYPE
from dnslib.dns import RR
from dnslib.server import DNSServer

from pssutil.payloadmanager import PayloadManager

TAG = f"[{Fore.LIGHTCYAN_EX}DNS{Fore.RESET}]"


class PssDnsServer:
    def __init__(self, address: str, port: int, pm: PayloadManager) -> None:
        self.server = DNSServer(resolver=PssDnsResolver(pm), logger=PssDnsLogger(), port=port, address=address)
        self.dns_thread = threading.Thread(target=lambda s: s.start(), args=[self.server], daemon=True)
        self.dns_thread.start()
        logger.info(f"Started DNS server on {Fore.LIGHTYELLOW_EX}{address}:{port}{Fore.RESET}")


class PssDnsResolver:
    def __init__(self, pm: PayloadManager) -> None:
        self.pm = pm

    def resolve(self, request, handler):
        reply = request.reply()

        for req in request.questions:
            qtype = QTYPE[req.qtype]

            if qtype == "A":
                dnsname = b".".join(req._qname.label).decode()
                reply.add_answer(*RR.fromZone(f"{dnsname}. 60 A {self.pm.cvars.LHOST}"))

        return reply


class PssDnsLogger:
    def __init__(self):
        pass

    def log_pass(self, *args):
        pass

    def log_prefix(self, handler):
        pass

    def log_recv(self, handler, data):
        pass

    def log_send(self, handler, data):
        pass

    def log_request(self, handler, request):
        queries = ", ".join(
            [f"{QTYPE[req.qtype]} \"{Fore.LIGHTYELLOW_EX}{b'.'.join(req._qname.label).decode()}{Fore.RESET}\"" for req in request.questions]
        )
        logger.info(f"{TAG} {Fore.LIGHTYELLOW_EX}{handler.client_address[0]}{Fore.RESET} requested: {queries}")

    def log_reply(self, handler, reply):
        pass

    def log_truncated(self, handler, reply):
        pass

    def log_error(self, handler, e):
        pass

    def log_data(self, dnsobj):
        pass
