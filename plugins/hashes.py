import hashlib

import crc32c
import crcmod
import fnvhash
import mmh3
import scrypt
import xxhash
from impacket import ntlm

from pssutil.cmdutils import CmdLenValidator


def add_cmd(pm, cmd):
    hash_functions = {
        "md4": hexdigest_new_wrapper("md4"),
        "md5": hexdigest_wrapper(hashlib.md5),
        "sha1": hexdigest_wrapper(hashlib.sha1),
        "sha224": hexdigest_wrapper(hashlib.sha224),
        "sha256": hexdigest_wrapper(hashlib.sha256),
        "sha384": hexdigest_wrapper(hashlib.sha384),
        "sha512": hexdigest_wrapper(hashlib.sha512),
        "sha3_224": hexdigest_wrapper(hashlib.sha3_224),
        "sha3_256": hexdigest_wrapper(hashlib.sha3_256),
        "sha3_384": hexdigest_wrapper(hashlib.sha3_384),
        "sha3_512": hexdigest_wrapper(hashlib.sha3_512),
        "shake_128": hexdigest_wrapper(hashlib.shake_128),
        "shake_256": hexdigest_wrapper(hashlib.shake_256),
        "blake2b": hexdigest_new_wrapper("blake2b"),
        "blake2s": hexdigest_new_wrapper("blake2s"),
        "xxh32": hexdigest_wrapper(xxhash.xxh32),
        "xxh64": hexdigest_wrapper(xxhash.xxh64),
        "xxh3_64": hash_wrapper(xxhash.xxh3_64_hexdigest),
        "xxh3_128": hash_wrapper(xxhash.xxh3_128_hexdigest),
        "ntlm": hexdigest_new_wrapper("md4", "utf-16le"),
        "lm": hex_wrapper(ntlm.LMOWFv1),
        "scrypt": hash_wrapper(scrypt.hash),
        "crc32c": hash_wrapper(crc32c.crc32),
        "crcmod_crc32": hash_wrapper(crcmod.mkCrcFun(0x104C11DB7), "utf-8"),
        "mmh3_32": lambda args: print(mmh3.hash(" ".join(args), 32)),
        "mmh3_64": lambda args: print(mmh3.hash(" ".join(args), 64)),
        "mmh3_128": lambda args: print(mmh3.hash(" ".join(args), 128)),
        "fnv1_32": hash_wrapper(fnvhash.fnv1_32),
        "fnv1a_32": hash_wrapper(fnvhash.fnv1a_32),
        "fnv1_64": hash_wrapper(fnvhash.fnv1_64),
        "fnv1a_64": hash_wrapper(fnvhash.fnv1a_64),
    }

    hash_handler = cmd.add(["hash"])

    for algorithm, wrapper in hash_functions.items():
        hash_handler.add([algorithm], wrapper)


def hash_wrapper(hash_fn, encoding="utf-8"):
    return CmdLenValidator(lambda args: print(hash_fn(" ".join(args).encode(encoding))), 1, ["input"])


def hexdigest_new_wrapper(hash_fn_name, encoding="utf-8"):
    return CmdLenValidator(lambda args: print(hashlib.new(hash_fn_name, " ".join(args).encode(encoding)).hexdigest()), 1, ["input"])


def hexdigest_wrapper(hash_fn, encoding="utf-8"):
    return CmdLenValidator(lambda args: print(hash_fn(" ".join(args).encode(encoding)).hexdigest()), 1, ["input"])


def hex_wrapper(hash_fn, encoding="utf-8"):
    return CmdLenValidator(lambda args: print(hash_fn(" ".join(args).encode(encoding)).hex()), 1, ["input"])
