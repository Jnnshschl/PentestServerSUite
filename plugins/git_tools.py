import logging as logger
from pathlib import Path

from colorama import Fore
from git import Repo

from pssutil.cmdutils import CmdLenValidator
from pssutil.fileutils import load_json, save_json

TAG = f"[{Fore.LIGHTGREEN_EX}GitTools{Fore.RESET}]"

GIT_TOOLS_TO_DOWNLOAD = Path("./conf/git_tools.json")
GIT_TOOLS = None


def add_cmd(pm, cmd):
    gittools_handler = cmd.add(["gittools"])
    gittools_handler.add(["update"], lambda _: update_tools(pm))
    gittools_handler.add(
        ["add"],
        CmdLenValidator(
            lambda args: add_tool(pm, args),
            2,
            ["category", "git repo url"],
        ),
    )


def add_tool(pm, args):
    global GIT_TOOLS
    GIT_TOOLS = load_json(GIT_TOOLS_TO_DOWNLOAD)

    platform = args[0]
    url = args[1]
    name = args[2] if len(args) > 2 else url.split("/")[-1].replace(".git", "")

    if GIT_TOOLS is not None:
        if platform not in GIT_TOOLS:
            GIT_TOOLS[platform] = {}

        if name not in GIT_TOOLS[platform]:
            GIT_TOOLS[platform][name] = url

        update_tool(pm, platform, name, url)
        save_json(GIT_TOOLS_TO_DOWNLOAD, GIT_TOOLS)


def update_tools(pm):
    global GIT_TOOLS
    GIT_TOOLS = load_json(GIT_TOOLS_TO_DOWNLOAD)
    logger.info(f"{TAG} Updating All Repositories")

    if GIT_TOOLS is not None:
        for platform, tool in GIT_TOOLS.items():
            for name, repo_url in tool.items():
                update_tool(pm, platform, name, repo_url)

    save_json(GIT_TOOLS_TO_DOWNLOAD, GIT_TOOLS)


def update_tool(pm, platform, name, repo_url):
    repo_path = Path(pm.cfg.serve_folder, f"{platform}/{name}/")

    if not repo_path.exists():
        logger.info(f"{TAG} Cloning: {repo_url} -> {repo_path}")
        Repo.clone_from(repo_url, repo_path)
    else:
        if not repo_path.is_dir():
            logger.error(f'{TAG} Error: "{repo_path}" already exists as a file, rename or delete it to pull the repo...')
        else:
            logger.info(f"{TAG} Pulling: {repo_url} -> {repo_path}")
            repo = Repo(repo_path)
            origin = repo.remote(name="origin")
            origin.pull()
