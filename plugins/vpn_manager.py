import json
import logging as logger
import os
import subprocess
from multiprocessing import Process
from pathlib import Path
from tempfile import NamedTemporaryFile
import gzip
import base64

from colorama import Fore

from pssutil.cmdutils import CmdLenValidator
from pssutil.fileutils import load_json, save_json

TAG = f"[{Fore.LIGHTYELLOW_EX}VPN{Fore.RESET}]"
VPN_FILE = Path("./conf/vpn.json")
VPN_THREADS = {} 


def add_cmd(pm, cmd):
    vpn_handler = cmd.add(["vpn"])
    ovpn_handler = vpn_handler.add(["openvpn"])

    cfg_json = load_json(VPN_FILE)
    vpn_autocompletion = {}

    for k in cfg_json.keys():
        vpn_autocompletion[k] = None

    ovpn_handler.add(["connect"], CmdLenValidator(openvpn_connect, 1, ["config name"]), vpn_autocompletion)
    ovpn_handler.add(["disconnect"], CmdLenValidator(openvpn_disconnect, 1, ["config name"]), vpn_autocompletion)

    ovpn_handler.add(["import"], CmdLenValidator(openvpn_import, 2, ["config name", "filepath"]))
    ovpn_handler.add(["delete"], CmdLenValidator(openvpn_delete, 1, ["config name"]))


def openvpn_connect(args):
    vpn_thread = VPN_THREADS.get(args[0], None)

    if vpn_thread is None:
        cfg_json = load_json(VPN_FILE)

        if cfg_json is None:
            cfg_json = {} 
        
        config = cfg_json.get(args[0], None)

        if config is not None:
            VPN_THREADS[args[0]] = VpnThread(args[0], config)
        else:
            logger.error(f"{TAG} VPN config named \"{Fore.LIGHTYELLOW_EX}{args[0]}{Fore.RESET}\" does not exist")
    else:
        logger.error(f"{TAG} VPN \"{Fore.LIGHTYELLOW_EX}{args[0]}{Fore.RESET}\" is already running...")


def openvpn_disconnect(args):
    vpn_thread = VPN_THREADS.get(args[0], None)

    if vpn_thread is not None:
        VPN_THREADS[args[0]].thread.kill()
        del VPN_THREADS[args[0]]
    else:
        logger.error(f"{TAG} VPN \"{Fore.LIGHTYELLOW_EX}{args[0]}{Fore.RESET}\" is not running...")


def openvpn_import(args):
    filepath = Path(args[1])

    if filepath.exists():
        comp_data = compress_file_and_encode(filepath)
        cfg_json = load_json(VPN_FILE)

        if cfg_json is None:
            cfg_json = {} 

        cfg_json[args[0]] = comp_data
        save_json(VPN_FILE, cfg_json)
    else:
        logger.error(f"{TAG} File \"{Fore.LIGHTYELLOW_EX}{filepath}{Fore.RESET}\" not found...")


def openvpn_delete(args):
    cfg_json = load_json(VPN_FILE)

    if cfg_json is not None:
        del cfg_json[args[0]]
        save_json(VPN_FILE, cfg_json)

def compress_file_and_encode(input_file_path):
    with open(input_file_path, 'r') as file:
        compressed_data = gzip.compress(file.read().encode('utf-8'))
        return base64.b64encode(compressed_data).decode('utf-8')


def decode_and_decompress(compressed_data):
    return gzip.decompress(base64.b64decode(compressed_data.encode('utf-8')))


class VpnThread:
    def __init__(self, name, config):
        self.name = name
        self.config = config
        self.openvpn_process = None
        self.thread = Process(target=self.run, args=(), daemon=True)
        self.thread.start()

    def run(self):
        logger.info(f"{TAG} Starting openvpn: '{Fore.LIGHTYELLOW_EX}{self.name}{Fore.RESET}'")
        self.openvpn_process = subprocess.Popen(['openvpn', '--config', '/dev/stdin'], stdout=subprocess.DEVNULL, stdin=subprocess.PIPE)
        self.openvpn_process.communicate(decode_and_decompress(self.config))
