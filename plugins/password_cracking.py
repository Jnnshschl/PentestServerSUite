import json
import logging as logger
import os
import subprocess
from pathlib import Path
from tempfile import NamedTemporaryFile

from colorama import Fore
from lmdbm import Lmdb

from pssutil.cmdutils import CmdLenValidator

TAG = f"[{Fore.LIGHTCYAN_EX}PassCrack{Fore.RESET}]"
PASSCRACK_FOLDER = Path("./conf/passcrack.db")


def add_cmd(pm, cmd):
    PassCrackDB()

    passcrack_handler = cmd.add(["passcrack"])
    passcrack_handler.add(["add"], CmdLenValidator(hash_add, 3, ["hash", "algorithm", "cleaxtext"]))
    passcrack_handler.add(["delete"], CmdLenValidator(hash_delete, 2, ["hash", "algorithm"]))
    passcrack_handler.add(["lookup"], CmdLenValidator(hash_lookup, 1, ["hash", "algorithm"]))
    passcrack_handler.add(["autocrack"], CmdLenValidator(hash_autocrack, 1, ["hash", "algorithm"]))

    crack_handler = passcrack_handler.add(["crack"])
    crack_handler.add(["john"], CmdLenValidator(hash_crack, 2, ["algorithm", "hash", "wordlist", "john args"]))


def hash_add(args):
    PassCrackDB().add(args[0], args[1], args[2])


def hash_delete(args):
    PassCrackDB().delete(args[0], args[1])


def hash_lookup(args):
    hash_value = args[0]
    algorithm = args[1] if len(args) > 1 else None

    if algorithm is None:
        all_values = PassCrackDB().try_get_all(hash_value)

        if all_values:
            for alg, val in all_values.items():
                logger.info(f"{TAG} [{alg}]: {hash_value} -> {Fore.LIGHTGREEN_EX}{val}{Fore.RESET}")
        else:
            logger.info(f"{TAG} {Fore.LIGHTRED_EX}No matching password found...{Fore.RESET}")

    else:
        val = PassCrackDB().try_get(hash_value, algorithm)

        if val is not None:
            logger.info(f"{TAG} [{algorithm}]: {hash_value} -> {Fore.LIGHTGREEN_EX}{val}{Fore.RESET}")
        else:
            logger.info(f"{TAG} {Fore.LIGHTRED_EX}No matching password found...{Fore.RESET}")


def hash_crack(args):
    with NamedTemporaryFile("w+") as tmp_file:
        tmp_file.writelines(args[1])
        tmp_file.flush()
        password = run_john(str(tmp_file.name), args[2], args[3:])

        if password:
            logger.info(f"{TAG} Password is: {Fore.LIGHTGREEN_EX}{password}{Fore.RESET}")
            PassCrackDB().add(args[1], args[0], password)


def hash_autocrack(args):    
    hash_value = args[0]
    algorithm = args[1] if len(args) > 1 else None

    if algorithm is None:
        all_values = PassCrackDB().try_get_all(hash_value)

        if all_values:
            for alg, val in all_values.items():
                logger.info(f"{TAG} [{alg}]: {hash_value} -> {Fore.LIGHTGREEN_EX}{val}{Fore.RESET}")
        else:
            # TODO: detect hash format and try to crack it
            pass
    else:
        val = PassCrackDB().try_get(hash_value, algorithm)

        if val is not None:
            logger.info(f"{TAG} [{algorithm}]: {hash_value} -> {Fore.LIGHTGREEN_EX}{val}{Fore.RESET}")
        else:
            # TODO: try to crack it
            pass


def run_john(password_file_path, wordlist, args):
    logger.info(
        f"{TAG} Cracking: {Fore.LIGHTCYAN_EX}{password_file_path}{Fore.RESET} using {Fore.LIGHTCYAN_EX}{wordlist}{Fore.RESET} and args {Fore.LIGHTCYAN_EX}{args}{Fore.RESET}"
    )

    try:
        with NamedTemporaryFile("w+") as pot_file:
            command = ["john", f"--pot={pot_file}", f"--wordlist={wordlist}", password_file_path] + args
            result = subprocess.run(command, capture_output=True, text=True, check=True)
            print(pot_file.readlines())

            lines = result.stdout.strip().split(os.linesep)

            if len(lines) > 1:
                password = lines[1].split("(")[0].strip()
                return password
        return None
    except subprocess.CalledProcessError as e:
        print(f"Error running John the Ripper: {e}")
        return None


class JsonLmdb(Lmdb):
    def _pre_key(self, value):
        return value.encode("utf-8")

    def _post_key(self, value):
        return value.decode("utf-8")

    def _pre_value(self, value):
        return json.dumps(value).encode("utf-8")

    def _post_value(self, value):
        return json.loads(value.decode("utf-8"))


class PassCrackDB:
    def __new__(cls, *args, **kwds):
        it = cls.__dict__.get("__it__")
        if it is not None:
            return it
        cls.__it__ = it = object.__new__(cls)
        it.init(*args, **kwds)
        return it

    def init(self) -> None:
        if not PASSCRACK_FOLDER.parent.exists():
            os.makedirs(PASSCRACK_FOLDER.parent)

        self.db_path = Path(PASSCRACK_FOLDER)
        logger.info(f'{TAG} Loading DB: "{Fore.LIGHTYELLOW_EX}{self.db_path}{Fore.RESET}"')
        self.db = JsonLmdb.open(str(self.db_path.absolute()), "c")

    def add(self, hash_value, algorithm, cleartext):
        if hash_value in self.db:
            self.db[hash_value][algorithm] = cleartext
        else:
            self.db[hash_value] = {algorithm: cleartext}

    def delete(self, hash_value, algorithm):
        if hash_value in self.db:
            del self.db[hash_value][algorithm]

    def try_get(self, hash_value, algorithm) -> str:
        v = self.try_get_all(hash_value)
        return v[algorithm] if algorithm in v else None

    def try_get_all(self, hash_value) -> str:
        if hash_value in self.db:
            return self.db[hash_value]
        return {}

    def __del__(self):
        self.db.close()
