import base64


# Transformer classes, used to transform payloads
class ITransformer(object):
    def __init__(self) -> None:
        # define characters that will be trimmed if shell cvar in wrapped in them.
        # will be usefull if for example a normal shell hash a system("<SHELL>")
        # template in it, and a transformer places a base64_decode("...") call
        # in it. the doublequotes need to be removed in that case.
        self.trim_chars_wrap = []

    @property
    def has_trim_chars(self) -> bool:
        return len(self.trim_chars_wrap) > 0

    def trim_chars(self, content, placeholder):
        try:
            c_start = content.find(placeholder)

            if content[c_start - 1] in self.trim_chars_wrap:
                content = content[: c_start - 1] + content[c_start:]
                c_start -= 1

            c_end = c_start + len(placeholder)

            if content[c_end] in self.trim_chars_wrap:
                content = content[:c_end] + content[c_end + 1:]

        except:
            pass

        return content

    def transform(self, s: str) -> str:
        return s


class SinglequoteToDoubleqoute(ITransformer):
    def transform(self, s: str) -> str:
        return s.replace("'", '"')


class DoubleqouteToSinglequote(ITransformer):
    def transform(self, s: str) -> str:
        return s.replace('"', "'")


class PHPBase64Encode(ITransformer):
    def __init__(self) -> None:
        self.trim_chars_wrap = ['"', "'"]

    def transform(self, s: str) -> str:
        encoded_payload = str(base64.b64encode(s.encode("utf-8")), "utf-8")
        return f'base64_decode("{encoded_payload}")'
