import logging as logger
import re

from colorama import Fore

PLACEHOLDER_L = "<<"
PLACEHOLDER_R = ">>"
PLACEHOLDER_REGEX = re.compile(rf"{PLACEHOLDER_L}[A-Z]+{PLACEHOLDER_R}")


class CvarManager(dict):
    def __new__(cls):
        if not hasattr(cls, "instance"):
            cls.instance = super(CvarManager, cls).__new__(cls)
            cls.instance.cvar_proxies = {}
        return cls.instance

    def __setattr__(self, name: str, value):
        if name == "cvar_proxies":
            dict.__setattr__(self, name, value)
        else:
            self.set_value_proxy(name, value)

    def __getattr__(self, name: str):
        return self.__getitem__(name)

    def __setitem__(self, name: str, value):
        self.set_value_proxy(name, value)

    def __getitem__(self, name: str):
        name = name.upper()
        return dict.__getitem__(self, name) if name in self else None

    def __delitem__(self, name: str):
        dict.__delitem__(self, name.upper())

    def set_value_proxy(self, name: str, value):
        name = name.upper()

        if name in self.cvar_proxies:
            for proxy in self.cvar_proxies[name]:
                try:
                    proxy_value = proxy(value)

                    if proxy_value is not None:
                        value = proxy_value
                except:
                    pass

        dict.__setitem__(self, name, value)
        logger.info(f'{name} set to "{Fore.LIGHTYELLOW_EX}{value}{Fore.RESET}"')
        return value

    def add_proxy(self, name: str, proxy):
        name = name.upper()

        if name not in self.cvar_proxies:
            self.cvar_proxies[name] = []

        self.cvar_proxies[name].append(proxy)

    def clear_proxies(self, name: str):
        self.cvar_proxies[name.upper()] = []

    def get_cvars_str(self, s: str):
        for cvar in PLACEHOLDER_REGEX.findall(s):
            yield cvar.replace(PLACEHOLDER_L, "").replace(PLACEHOLDER_R, "").upper()

    def has_cvar(self, s: str, cvar: str):
        rx = rf"{PLACEHOLDER_L}{cvar.upper()}{PLACEHOLDER_R}"
        return len(re.findall(rx, s)) > 0

    def insert_all(self, payload: str) -> str:
        for cvar in self.get_cvars_str(payload):
            payload = self.insert_cvar(cvar, payload)
        return payload

    def insert_cvar(self, cvar, payload):
        val = self[cvar]

        if val:
            if not isinstance(val, str):
                val = str(val)

            payload = payload.replace(f"{PLACEHOLDER_L}{cvar}{PLACEHOLDER_R}", val)

        return payload
