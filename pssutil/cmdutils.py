import logging as logger
import os
from pathlib import Path
from uuid import uuid4

import pyperclip


def cmd_print_unknown(cmd):
    if cmd and len(cmd) > 0:
        logger.warning('Unknown command, type "?" or "help", "!" to execute os commands')


def cmd_validate(cmd_arr, expected_len, fail_msg=None):
    if len(cmd_arr) >= expected_len:
        return True
    elif fail_msg:
        logger.warning(fail_msg)
    return False


def cmd_split(arr, cmd_lower: bool = False):
    if len(arr) > 0:
        return (
            arr[0].lower() if cmd_lower else arr[0],
            arr[1:],
        )
    return ("", [])


def cmd_copy_or_execute(remaining_args: list, s: str):
    if len(remaining_args) > 0:
        first_arg_lower = remaining_args[0].lower()

        if first_arg_lower in ["c", "copy"]:
            print(s)

            try:
                pyperclip.copy(s)
            except Exception as ex:
                logger.error(f"Failed to copy to clipboard: {str(ex)}")

        elif first_arg_lower in ["x", "execute"]:
            try:
                os.system(s)
            except Exception as ex:
                logger.error(f'Failed to execute "{s}": {str(ex)}')

        elif first_arg_lower in ["t", "tmux"]:
            try:
                os.system(f"tmux new '{s}'")
            except Exception as ex:
                logger.error(f'Failed to start tmux "{s}": {str(ex)}')
    else:
        print(s)


def generate_random_filename(folder: Path, extension: str, lenght: int = 8):
    filename = abs(hash(uuid4().hex)) % (10**lenght)
    fileextension = "" if extension in ["elf"] else f".{extension}"
    return Path(folder, f"{filename}{fileextension}")


def ensure_folder(folder: str or Path):
    try:
        if not isinstance(folder, Path):
            folder = Path(folder)

        if not folder.exists():
            os.makedirs(folder)

    except:
        return False
    return folder.exists()
