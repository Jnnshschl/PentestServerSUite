import collections

from prompt_toolkit.completion import CompleteEvent, Completer
from prompt_toolkit.completion.word_completer import WordCompleter
from prompt_toolkit.document import Document


class NestedWordCompleter(Completer):
    def __init__(self, options: dict[str, Completer | None]) -> None:
        self.options = options

    @classmethod
    def from_nested_dict(cls, data):
        options: dict[str, Completer | None] = {}

        for k, value in data.items():
            if not isinstance(k, set) and not isinstance(k, str) and isinstance(k, collections.abc.Iterable):
                keys = set(k)
            else:
                keys = set()
                keys.add(k if isinstance(k, str) else str(k))

            for key in keys:
                if isinstance(value, Completer):
                    options[key] = value
                elif isinstance(value, str):
                    options[key] = cls.from_nested_dict({value: None})
                elif isinstance(value, int) or isinstance(value, float):
                    options[key] = cls.from_nested_dict({str(value): None})
                elif isinstance(value, dict):
                    options[key] = cls.from_nested_dict(value)
                elif isinstance(value, set) or isinstance(value, list) or isinstance(value, tuple):
                    options[key] = cls.from_nested_dict({item: None for item in value})
                else:
                    assert value is None
                    options[key] = None

        return cls(options)

    def get_completions(self, document: Document, complete_event: CompleteEvent):
        text = document.text_before_cursor.lstrip()
        stripped_len = len(document.text_before_cursor) - len(text)

        if " " in text:
            first_term = text.split()[0]
            completer = self.options.get(first_term)

            if completer is not None:
                remaining_text = text[len(first_term) :].lstrip()
                move_cursor = len(text) - len(remaining_text) + stripped_len
                new_document = Document(remaining_text, cursor_position=document.cursor_position - move_cursor)
                yield from completer.get_completions(new_document, complete_event)

        else:
            completer = WordCompleter(list(self.options.keys()), ignore_case=True, match_middle=True)
            yield from completer.get_completions(document, complete_event)
